// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: api/url_shortener/url_shotener.proto

package url_shortener_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UrlShortenerServiceClient is the client API for UrlShortenerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UrlShortenerServiceClient interface {
	// Create short url
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	// Remove short url
	Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
	// Get full url by short
	GetFullURL(ctx context.Context, in *GetFullURLRequest, opts ...grpc.CallOption) (*GetFullURLResponse, error)
	// Get all urls with short
	GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error)
}

type urlShortenerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUrlShortenerServiceClient(cc grpc.ClientConnInterface) UrlShortenerServiceClient {
	return &urlShortenerServiceClient{cc}
}

func (c *urlShortenerServiceClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/url_shortener.UrlShortenerService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerServiceClient) Remove(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := c.cc.Invoke(ctx, "/url_shortener.UrlShortenerService/Remove", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerServiceClient) GetFullURL(ctx context.Context, in *GetFullURLRequest, opts ...grpc.CallOption) (*GetFullURLResponse, error) {
	out := new(GetFullURLResponse)
	err := c.cc.Invoke(ctx, "/url_shortener.UrlShortenerService/GetFullURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *urlShortenerServiceClient) GetList(ctx context.Context, in *GetListRequest, opts ...grpc.CallOption) (*GetListResponse, error) {
	out := new(GetListResponse)
	err := c.cc.Invoke(ctx, "/url_shortener.UrlShortenerService/GetList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UrlShortenerServiceServer is the server API for UrlShortenerService service.
// All implementations must embed UnimplementedUrlShortenerServiceServer
// for forward compatibility
type UrlShortenerServiceServer interface {
	// Create short url
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	// Remove short url
	Remove(context.Context, *RemoveRequest) (*RemoveResponse, error)
	// Get full url by short
	GetFullURL(context.Context, *GetFullURLRequest) (*GetFullURLResponse, error)
	// Get all urls with short
	GetList(context.Context, *GetListRequest) (*GetListResponse, error)
	mustEmbedUnimplementedUrlShortenerServiceServer()
}

// UnimplementedUrlShortenerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUrlShortenerServiceServer struct {
}

func (UnimplementedUrlShortenerServiceServer) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedUrlShortenerServiceServer) Remove(context.Context, *RemoveRequest) (*RemoveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedUrlShortenerServiceServer) GetFullURL(context.Context, *GetFullURLRequest) (*GetFullURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFullURL not implemented")
}
func (UnimplementedUrlShortenerServiceServer) GetList(context.Context, *GetListRequest) (*GetListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetList not implemented")
}
func (UnimplementedUrlShortenerServiceServer) mustEmbedUnimplementedUrlShortenerServiceServer() {}

// UnsafeUrlShortenerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UrlShortenerServiceServer will
// result in compilation errors.
type UnsafeUrlShortenerServiceServer interface {
	mustEmbedUnimplementedUrlShortenerServiceServer()
}

func RegisterUrlShortenerServiceServer(s grpc.ServiceRegistrar, srv UrlShortenerServiceServer) {
	s.RegisterService(&UrlShortenerService_ServiceDesc, srv)
}

func _UrlShortenerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/url_shortener.UrlShortenerService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServiceServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortenerService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/url_shortener.UrlShortenerService/Remove",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServiceServer).Remove(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortenerService_GetFullURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFullURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServiceServer).GetFullURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/url_shortener.UrlShortenerService/GetFullURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServiceServer).GetFullURL(ctx, req.(*GetFullURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UrlShortenerService_GetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UrlShortenerServiceServer).GetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/url_shortener.UrlShortenerService/GetList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UrlShortenerServiceServer).GetList(ctx, req.(*GetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UrlShortenerService_ServiceDesc is the grpc.ServiceDesc for UrlShortenerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UrlShortenerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "url_shortener.UrlShortenerService",
	HandlerType: (*UrlShortenerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _UrlShortenerService_Create_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _UrlShortenerService_Remove_Handler,
		},
		{
			MethodName: "GetFullURL",
			Handler:    _UrlShortenerService_GetFullURL_Handler,
		},
		{
			MethodName: "GetList",
			Handler:    _UrlShortenerService_GetList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/url_shortener/url_shotener.proto",
}
